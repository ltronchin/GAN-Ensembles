import sys
sys.path.extend([
    "./",
])
import os
import torch
from itertools import combinations
from tqdm import tqdm
import math
import time
import scipy
import numpy as np
import pandas as pd
import uuid
import argparse

from src.general_utils import util_data
from src.custom_metrics import features
from src.general_utils import util_path
from src.general_utils import util_general
import src.custom_metrics.preparation as pp

def get_parser():

    parser = argparse.ArgumentParser(description='Compute features.')

    parser.add_argument('--source_dir', type=str, default='./reports/pneumoniamnist', help='Directory name to fake samples.') #/home/lorenzo/GAN-Ensembles/reports/pneumoniamnist #./reports/pneumoniamnist
    parser.add_argument('--dataset_name', type=str, default='pneumoniamnist', choices=['pneumoniamnist'], help='The name of dataset')
    parser.add_argument('--gpu_ids', type=str, default='1', help='gpu ids: e.g. 0  use -1 for CPU')
    parser.add_argument('--batch_size', type=int, default='64', help='Batch size')
    parser.add_argument('--gan_models', type=util_general.parse_comma_separated_list, default='ACGAN-Mod-ADC,SAGAN,ReACGAN-ADA', help='List of GANs to enable in the ensemble')
    parser.add_argument('--gan_steps', type=util_general.parse_comma_separated_list, default='100000', help='Iter or Iters to sample each GAN')
    parser.add_argument("--post_resizer", type=str, default="friendly", help="which resizer will you use to evaluate GANs in ['legacy', 'clean', 'friendly']")
    parser.add_argument('--eval_backbone', type=str, default='resnet_ae_50_pneumoniamnist', help="[InceptionV3_torch, ResNet50_torch, SwAV_torch, resnet_ae_50_pneumoniamnist, disc_resnet_50_pneumoniamnist")
    parser.add_argument('--n_samples', type=int, default='50000',  help='Total number of images generated by the ensemble.')

    return parser

# main
if __name__ == '__main__':

    parser = get_parser()
    args, unknown = parser.parse_known_args()

    # Directories.
    source_dir = args.source_dir
    dataset_name = args.dataset_name
    samples_dir = os.path.join(source_dir, 'samples')
    features_dir = os.path.join(source_dir, 'features')

    # Parameters.
    eval_backbone= args.eval_backbone
    post_resizer= args.post_resizer
    n_samples = args.n_samples
    batch_size = args.batch_size

    # Device.
    gpu_ids = int(args.gpu_ids)
    if gpu_ids >= 0:
        # Check if available.
        if not torch.cuda.is_available():
            raise ValueError('GPU specified but not available.')
        device = torch.device('cuda:{}'.format(gpu_ids))
    else:
        device = torch.device('cpu')

    # GANs
    gan_models = args.gan_models
    if gan_models is None:
        config_dir = os.path.join('src/configs/', dataset_name)
        configs = os.listdir(config_dir)
        configs = [x.split(".yaml")[0] for x in configs]
        gan_models = util_general.parse_separated_list_comma(configs)

    gan_steps = args.gan_steps
    gan_aval = os.listdir(samples_dir)
    filename = f'history_time_compute_features_{eval_backbone}_{post_resizer}_{n_samples}'

    # Create the entire path for each gan.
    gan_folders = [os.path.join(samples_dir, x, 'fake') for x in gan_aval if any(y in x for y in gan_models)]
    gan_folders = [os.path.join(x, f"step={y}") for x in gan_folders for y in gan_steps]

    eval_model = pp.LoadEvalModel(
        eval_backbone=eval_backbone,
        post_resizer=post_resizer,
        device=device
    )

    # Create a dataframe to store the computational time as well as parameters.
    df = pd.DataFrame(columns=['folder', 'eval_backbone', 'post_resizer', 'n_samples', 'time'])
    # Add parameters
    df['folder'] = gan_folders
    df['eval_backbone'] = eval_backbone
    df['post_resizer'] = post_resizer
    df['n_samples'] = n_samples

    for gan_folder in tqdm(gan_folders, total=len(gan_folders)):
        print("\n")
        print('Creating feature representation for {}'.format(gan_folder))

        tik = time.time()
        # Dataset
        gan_dataset = util_data.EnsembleDataset(folders=[gan_folder], weights=[1.0])

        # Dataloder
        dataloader = torch.utils.data.DataLoader(gan_dataset, batch_size=batch_size, shuffle=False)

        # Compute the features representations.
        _ = features.compute_feature(
            dataloader=dataloader,
            eval_model=eval_model,
            batch_size=batch_size,
            quantize=True,
            device=device,
            cache_dir=features_dir + gan_folder.split('samples')[-1],
            max_items=n_samples,
            capture_all=True,
            capture_mean_cov=True
        )
        tok = time.time()
        # Add time to dataframe
        df.loc[df['folder'] == gan_folder, 'time'] = tok - tik

    # Save dataframe to disk as xlsx
    df.to_excel(os.path.join(features_dir, f'{filename}.xlsx'), index=False)

    print("May be the force with you.")

