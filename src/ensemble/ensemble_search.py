import copy
import sys
sys.path.extend([
    "./",
])
import argparse
import os
from itertools import combinations
import pandas as pd
import pickle
from tqdm import tqdm
import torch
import random

from src.general_utils import util_general
from src.general_utils import util_path
from src.general_utils import util_ensemble

import optuna
def get_parser():

    parser = argparse.ArgumentParser(description='Ensemble search.')

    parser.add_argument('--source_dir', type=str, default='./reports/pneumoniamnist', help='Directory name to fake samples.')
    parser.add_argument('--dataset_name', type=str, default='pneumoniamnist',  choices=['chestmnist', 'pneumoniamnist', 'breastmnist'], help='The name of dataset')
    parser.add_argument('--gpu_ids', type=str, default='0', help='gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU')
    # GANs params.
    parser.add_argument('--gan_models', type=util_general.parse_comma_separated_list,   default='MHGAN,SNGAN,StyleGAN2-D2DCE,ReACGAN-ADA,ReACGAN-ADC,ReACGAN-DiffAug,ACGAN-Mod,ReACGAN,BigGAN-DiffAug,BigGAN-Info,StyleGAN2-DiffAug,ACGAN-Mod-TAC,BigGAN,ReACGAN-TAC,BigGAN-ADA,StyleGAN2-Info,ACGAN-Mod-ADC,StyleGAN2-ADA,ReACGAN-Info,StyleGAN2,ContraGAN,SAGAN', help='List of GANs to enable in the ensemble') #ACGAN-Mod-ADC,SAGAN,ReACGAN-ADA,StyleGAN2-DiffAug,StyleGAN2  # MHGAN,SNGAN,StyleGAN2-D2DCE,ReACGAN-ADA,ReACGAN-ADC,ReACGAN-DiffAug,ACGAN-Mod,ReACGAN,BigGAN-DiffAug,BigGAN-Info,StyleGAN2-DiffAug,ACGAN-Mod-TAC,BigGAN,ReACGAN-TAC,BigGAN-ADA,StyleGAN2-Info,ACGAN-Mod-ADC,StyleGAN2-ADA,ReACGAN-Info,StyleGAN2,ContraGAN,SAGAN
    parser.add_argument('--gan_steps', type=util_general.parse_comma_separated_list, default='20000,40000,60000,80000,100000',help='Iter or Iters to sample each GAN') #20000,40000 # 20000,40000,60000,80000,100000
    parser.add_argument("--post_resizer", type=str, default="friendly", help="which resizer will you use to evaluate GANs in ['legacy', 'clean', 'friendly']")
    parser.add_argument('--eval_backbone', type=str, default='disc_resnet_50_pneumoniamnist', help="[InceptionV3_torch, SwAV_torch, resnet_ae_50_pneumoniamnist, cnn_resnet_50_pneumoniamnist, disc_resnet_50_pneumoniamnist]")
    parser.add_argument('--n_samples', type=int, default='50000', help='Total number of images generated by the ensemble.')

    parser.add_argument('--obj_name', type=str, default='intra_inter', choices=['intra_inter', 'intra', 'inter'])
    parser.add_argument('--fitness_summary_flag', type=str, default='mean', choices=['mean'])
    parser.add_argument('--fitness_name', type=str, default='fid', choices=['fid', 'rec'])
    parser.add_argument('--n_trial', type=int, default=5000)
    parser.add_argument('--split', type=str, default='train', choices=['train', 'val'])

    return parser

if __name__ == '__main__':

    parser = get_parser()
    args, unknown = parser.parse_known_args()

    # Directories.
    source_dir = args.source_dir
    dataset_name = args.dataset_name
    reports_dir = os.path.join(source_dir, 'ensemble')
    features_dir = os.path.join(source_dir, 'features')
    util_path.create_dir(reports_dir)

    # Parameters.
    gan_models = args.gan_models
    gan_steps = args.gan_steps
    eval_backbone= args.eval_backbone
    post_resizer= args.post_resizer
    n_samples = args.n_samples
    obj_name = args.obj_name
    fitness_summary_flag = args.fitness_summary_flag
    fitness_name = args.fitness_name
    n_trial = args.n_trial
    split = args.split

    # Add to the filename the current time.
    filename = f'ensemble_search_{fitness_name}-obj_name_{obj_name}-step_{util_general.parse_separated_list_comma(gan_steps)}-summary_{fitness_summary_flag}-trial_{n_trial}-{eval_backbone}_{post_resizer}_{n_samples}'
    import datetime
    now = datetime.datetime.now()
    filename = f'{now.strftime("%Y-%m-%d_%H-%M-%S")}_{filename}'

    ensemble_dir = os.path.join(reports_dir, filename)
    util_path.create_dir(ensemble_dir)

    # Load the dataframe containing the binary FID.
    try:
        if fitness_name in ['rec', 'prc', 'dns', 'cvg']:
            df_synth = pd.read_excel(os.path.join(features_dir, f'history_prdc_bin_combinations_{eval_backbone}_{post_resizer}_{n_samples}.xlsx'))
            df_real = pd.read_excel(os.path.join(features_dir, f'history_prdc_bin_real_{split}_{eval_backbone}_{post_resizer}_{n_samples}.xlsx'))
        else:
            df_synth = pd.read_excel(os.path.join(features_dir, f'history_{fitness_name}_bin_combinations_{eval_backbone}_{post_resizer}_{n_samples}.xlsx'))
            df_real = pd.read_excel(os.path.join(features_dir, f'history_{fitness_name}_bin_real_{split}_{eval_backbone}_{post_resizer}_{n_samples}.xlsx'))
    except FileNotFoundError:
        raise FileNotFoundError

    # Define the objective function.
    func = lambda trial: util_ensemble.objective(
        trial=trial,
        gan_models=gan_models,
        gan_steps=gan_steps,
        obj_name=obj_name,
        fitness_name=fitness_name,
        summary_flag=fitness_summary_flag,
        data_synth=df_synth,
        data_real=df_real
    )

    if obj_name == 'intra_inter':
        study = optuna.create_study(directions=["maximize", "minimize"])
        study.optimize(func, n_trials=n_trial)
    elif obj_name == 'inter':
        study = optuna.create_study(directions=["minimize"])
        study.optimize(func, n_trials=n_trial)
    elif obj_name == 'intra':
        study = optuna.create_study(directions=["maximize"])
        study.optimize(func, n_trials=n_trial)
    else:
        raise NotImplementedError

    print("Number of finished trials: ", len(study.trials))
    df = study.trials_dataframe(attrs=('number', 'value', 'params', 'state'))

    if obj_name == 'intra_inter':
        fig = optuna.visualization.plot_pareto_front(study, target_names=[f"intra_{fitness_name}", f"inter_{fitness_name}"])
        fig.write_html(os.path.join(ensemble_dir,f"pareto_front_{fitness_name}.html"))
        best_trials = copy.deepcopy(study.best_trials)

        best_trials_number = [trial.number for trial in best_trials]
        best_trials_df = df[df['number'].isin(best_trials_number)]
        best_trials_df = best_trials_df[best_trials_df['state'] == "COMPLETE"]
        best_trials_df.reset_index(inplace=True, drop=True)
        best_trials_df.to_excel(os.path.join(ensemble_dir, 'optuna_study_best.xlsx'), index=False)

        df = df[df['state'] == "COMPLETE"]
        df.reset_index(inplace=True, drop=True)
        df.to_excel(os.path.join(ensemble_dir, 'optuna_study.xlsx'), index=False)

    elif obj_name=='inter':
        best_trials = min(study.best_trials, key=lambda t: t.values[0])
        with open(os.path.join(ensemble_dir, f"best_trials.txt"), 'w') as f:
            f.write(f"\nNumber: {best_trials.number}")
            f.write(f"\nParams: {best_trials.params}")
            f.write(f"\nValues: {best_trials.values}")

        df = df[df['state'] == "COMPLETE"]
        df.reset_index(inplace=True, drop=True)
        df.to_excel(os.path.join(ensemble_dir, 'optuna_study.xlsx'), index=False)

    elif obj_name == 'intra':
        best_trials = max(study.best_trials, key=lambda t: t.values[0])
        with open(os.path.join(ensemble_dir, f"best_trials.txt"), 'w') as f:
            f.write(f"\nNumber: {best_trials.number}")
            f.write(f"\nParams: {best_trials.params}")
            f.write(f"\nValues: {best_trials.values}")

        df = df[df['state'] == "COMPLETE"]
        df.reset_index(inplace=True, drop=True)
        df.to_excel(os.path.join(ensemble_dir, 'optuna_study.xlsx'), index=False)

    print('May the force be with you.')